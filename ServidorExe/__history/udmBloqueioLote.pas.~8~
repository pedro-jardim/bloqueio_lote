Unit udmBloqueioLote;

interface

uses SysUtils, Classes, InvokeRegistry, Midas, SOAPMidas, SOAPDm,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.Phys.MSSQL, FireDAC.Phys.MSSQLDef, FireDAC.VCLUI.Wait,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  FireDAC.Phys.ODBCBase, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client;

type
  IdmBloqueioLote = interface(IAppServerSOAP)
    ['{192F05A7-37AF-4EEB-9DDB-604CA1E6BF01}']
    function envioLaudoXML(const arquivo: WideString): WideString;
  end;

  TdmBloqueioLote = class(TSoapDataModule, IdmBloqueioLote, IAppServerSOAP, IAppServer)
    FDConnection: TFDConnection;
    qryTeste: TFDQuery;
    MSSQLDriverLink: TFDPhysMSSQLDriverLink;
    procedure SoapDataModuleDestroy(Sender: TObject);
  private

  public
    function envioLaudoXML(const arquivo: WideString): WideString;
  end;

implementation

uses
  Xml.xmldom, Xml.XMLIntf, Xml.XMLDoc;

{$R *.DFM}

procedure TdmBloqueioLoteCreateInstance(out obj: TObject);
begin
 obj := TdmBloqueioLote.Create(nil);
end;

function TdmBloqueioLote.envioLaudoXML(const arquivo: WideString): WideString;
var
  lxml, lxmlRetorno, lxmlRetornoErro : IXMLDocument;
  lNodeIdentificacao, lNodeInspecao, lNodeItens,
  lNodeItem, lNodeRetorno, lNodeRetornoErro : IXMLNode;
  i, x : integer;
  lValido : Boolean;
begin

  lValido := True;

  //-------------------------------------------------------------
  //-->> Valida o XML de Entrada
  //-------------------------------------------------------------
  try
    lxml := NewXMLDocument;
    lxml.XML.Text := arquivo;
    lxml.Active := True;
  except
    on E:Exception do
    begin
      lxmlRetornoErro  := NewXMLDocument;
      lNodeRetornoErro := lxmlRetornoErro.AddChild('Retorno');
      lNodeRetornoErro.AddChild('id').Text       := '0';
      lNodeRetornoErro.AddChild('Sucesso').Text  := 'N';
      lNodeRetornoErro.AddChild('mensagem').Text := '(MSGWMS) Operação não Realizada - Erro na estrutura do XML! ' + E.Message;
      Result := lxmlRetornoErro.XML.Text;
      lValido := False;
    end;
  end;

  if lValido then
  begin

    //-------------------------------------------------------------
    //-->> Grava os Dados
    //-------------------------------------------------------------
    with qryTeste do
    begin
      close;
      ParamByName('nm_arquivo').AsMemo := arquivo;
      try
        ExecSQL;
      except
        lxmlRetornoErro  := NewXMLDocument;
        lNodeRetornoErro := lxmlRetornoErro.AddChild('Retorno');
        lNodeRetornoErro.AddChild('id').Text       := '0';
        lNodeRetornoErro.AddChild('Sucesso').Text  := 'N';
        lNodeRetornoErro.AddChild('mensagem').Text := '(MSGWMS) Operação não Realizada - Erro na estrutura do XML! ' + E.Message;
        Result := lxmlRetornoErro.XML.Text;
        lValido := False;
      end;
      Close;
    end;

  end;

  if lValido then
  begin

    //-------------------------------------------------------------
    //-->> Retorno de Sucesso
    //-------------------------------------------------------------
    lxmlRetorno  := NewXMLDocument;
    lNodeRetorno := lxmlRetorno.AddChild('Retorno');
    lNodeRetorno.AddChild('id').Text       := '1234';
    lNodeRetorno.AddChild('Sucesso').Text  := 'S';
    lNodeRetorno.AddChild('mensagem').Text := '(MSGWMS) Operação Realizada com Sucesso!';

    Result := lxmlRetorno.XML.Text;

  end;


end;

procedure TdmBloqueioLote.SoapDataModuleDestroy(Sender: TObject);
begin
  FDConnection.Connected := False;
end;

initialization
   InvRegistry.RegisterInvokableClass(TdmBloqueioLote, TdmBloqueioLoteCreateInstance);
   InvRegistry.RegisterInterface(TypeInfo(IdmBloqueioLote));
end.
